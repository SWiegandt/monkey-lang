import Lexer (Token (Token), TokenType (..), runLexer)
import Test.HUnit

testLexer =
  let input =
        unlines
          [ "let five = 5;",
            "let ten = 10;",
            "",
            "let add = fn(x, y) {",
            "  x + y;",
            "};",
            "",
            "let result = add(five, ten);",
            "!-/*5;",
            "5 < 10 > 5;",
            "",
            "if (5 < 10) {",
            "   return true;",
            "} else {",
            "   return false;",
            "}",
            "",
            "10 == 10;",
            "10 != 9;"
          ]
      expected =
        [ Token Let "let",
          Token Ident "five",
          Token Assign "=",
          Token Int "5",
          Token Semicolon ";",
          Token Let "let",
          Token Ident "ten",
          Token Assign "=",
          Token Int "10",
          Token Semicolon ";",
          Token Let "let",
          Token Ident "add",
          Token Assign "=",
          Token Function "fn",
          Token LParen "(",
          Token Ident "x",
          Token Comma ",",
          Token Ident "y",
          Token RParen ")",
          Token LBrace "{",
          Token Ident "x",
          Token Plus "+",
          Token Ident "y",
          Token Semicolon ";",
          Token RBrace "}",
          Token Semicolon ";",
          Token Let "let",
          Token Ident "result",
          Token Assign "=",
          Token Ident "add",
          Token LParen "(",
          Token Ident "five",
          Token Comma ",",
          Token Ident "ten",
          Token RParen ")",
          Token Semicolon ";",
          Token Bang "!",
          Token Minus "-",
          Token Slash "/",
          Token Asterisk "*",
          Token Int "5",
          Token Semicolon ";",
          Token Int "5",
          Token LessThan "<",
          Token Int "10",
          Token GreaterThan ">",
          Token Int "5",
          Token Semicolon ";",
          Token If "if",
          Token LParen "(",
          Token Int "5",
          Token LessThan "<",
          Token Int "10",
          Token RParen ")",
          Token LBrace "{",
          Token Return "return",
          Token TrueT "true",
          Token Semicolon ";",
          Token RBrace "}",
          Token Else "else",
          Token LBrace "{",
          Token Return "return",
          Token FalseT "false",
          Token Semicolon ";",
          Token RBrace "}",
          Token Int "10",
          Token Equal "==",
          Token Int "10",
          Token Semicolon ";",
          Token Int "10",
          Token NotEqual "!=",
          Token Int "9",
          Token Semicolon ";",
          Token EOF ""
        ]
   in TestCase (assertEqual "" expected (runLexer input))

main :: IO ()
main = runTestTTAndExit $ TestList [TestLabel "test lexer" testLexer]
